import win32print
import win32api
import win32ui
import win32gui
import traceback
import time

# Global flag to prevent recursive logging loops
logging_enabled = True

def log_message(message):
    global logging_enabled
    if not logging_enabled:
        return  # Prevents infinite logging loop
    try:
        logging_enabled = False  # Temporarily disable logging to avoid recursion
        log_file_path = "C:\\printer_log.txt"
        with open(log_file_path, "a", encoding="utf-8") as log_file:
            log_entry = f"{time.strftime('%Y-%m-%d %H:%M:%S')} - {message}\n"
            log_file.write(log_entry)
        logging_enabled = True  # Re-enable logging after successful write
    except Exception as e:
        logging_enabled = True  # Ensure logging is re-enabled even if an error occurs
        print(f"Logging Error: {e}")


def error_message(title, message):
    try:
        win32gui.MessageBox(0, message, title, 0x10)
        log_message(f"ERROR - {title}: {message}")
    except Exception as e:
        print(f"Error displaying message box: {e}")


def list_printers():
    try:
        printers = win32print.EnumPrinters(win32print.PRINTER_ENUM_LOCAL | win32print.PRINTER_ENUM_CONNECTIONS)
        printer_names = [printer[2] for printer in printers]
        
        if not printer_names:
            error_message("Printer Error", "No printers found. Exiting.")
            return []
        
        print("\nAvailable Printers:")
        for i, name in enumerate(printer_names, 1):
            print(f"{i}. {name}")
        log_message(f"Listed printers: {', '.join(printer_names)}")
        return printer_names
    except Exception as e:
        error_message("Printer Error", f"Error listing printers: {e}")
        return []

def main():
    try:
        while True:
            printers = list_printers()
            if not printers:
                print("No printers found. Exiting.")
                break
            
            choice = input("\nEnter the number of the printer you want to manage (or 'q' to quit): ").strip()
            if choice.lower() == 'q':
                print("Exiting.")
                break
            
            try:
                printer_index = int(choice) - 1
                if printer_index < 0 or printer_index >= len(printers):
                    print("Invalid selection. Please try again.")
                    continue
                printer_name = printers[printer_index]
            except ValueError:
                print("Invalid input. Please enter a number.")
                continue

            print(f"\nSelected Printer: {printer_name}")
            while True:
                print("\nSelect an action:")
                print("1. Set as Default Printer")
                print("2. Exit")
                action = input("Enter your choice: ").strip()
                
                if action == '1':
                    try:
                        win32print.SetDefaultPrinter(printer_name)
                        print(f"\nDefault printer set to: {printer_name}")
                        log_message(f"Default printer set to: {printer_name}")
                    except Exception as e:
                        error_message("Printer Error", f"Failed to set default printer: {e}")
                elif action == '2':
                    print("Returning to printer selection...")
                    break
                else:
                    print("Invalid choice. Please try again.")
    except Exception as e:
        print(f"Critical error: {e}")
        traceback.print_exc()
        log_message(f"Critical Error: {e}")

if __name__ == "__main__":
    main()
